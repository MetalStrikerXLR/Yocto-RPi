#@TYPE: Machine
#@NAME: osd32mp1-emmc-mender
#@DESCRIPTION: OSD32MP1-RED Evaluation Board. Boot from eMMC with mender OTA updates
#@NEEDED_BSPLAYERS: meta-st-stm32mp meta-st-openstlinux

require conf/machine/include/osd32mp1.inc

# disable bootfs: with mender, kernel and the devicetree are
# picked directly from /boot in the rootfs partition
ST_BOOTFS = "0"
ST_USERFS = "0"
ST_VENDORFS = "0"

MACHINE_FEATURES:remove = " initrd autoresize"

BOOTDEVICE_LABELS += "emmc"

DEVICE_BOARD_ENABLE:EMMC += "${OSD32MP1_DEVICETREE}"

ACCEPT_EULA_osd32mp1-emmc-mender = "1"

#####################################################
### Mender configuration ###

MENDER_DTB_NAME = "${KERNEL_DEVICETREE}"

MENDER_STORAGE_DEVICE = "/dev/mmcblk1"

# data partition: /dev/mmcblk1p8
MENDER_DATA_PART = "${MENDER_STORAGE_DEVICE_BASE}8"

# rootfs A: /dev/mmcblk1p6
MENDER_ROOTFS_PART_A = "${MENDER_STORAGE_DEVICE_BASE}6"

# rootfs B: /dev/mmcblk1p7
MENDER_ROOTFS_PART_B = "${MENDER_STORAGE_DEVICE_BASE}7"

# environment offset in MMC1: 0x980000
MENDER_UBOOT_ENV_STORAGE_DEVICE_OFFSET_1 = "9961472"

# redundant environment offset in MMC1: 0x9c0000
MENDER_UBOOT_ENV_STORAGE_DEVICE_OFFSET_2 = "10223616"

# environment size set to 16k (after adding mender default env is ~6k)
BOOTENV_SIZE = "0x4000"

# total storage, in MiB
# size of rootfs is ~ (TOTAL_SIZE_MB - DATA_SIZE_MB)/2
MENDER_STORAGE_TOTAL_SIZE_MB ?= "1000"

#
# force mender to not place an entry in /etc/fstab for
# the u-boot partition (/uboot)
MENDER_BOOT_PART_SIZE_MB = "0"
MENDER_BOOT_PART = ""

# Keep this small, it'll be grown on the first boot.
# NB: may need to grow if there are files being placed
# in /data which don't fit in the current size
MENDER_DATA_PART_SIZE_MB ?= "8"

#
# Enable generation of the image for the data partition
IMAGE_FSTYPES:append = " dataimg mender"

PREFERRED_PROVIDER:u-boot = "u-boot-stm32mp"

#########################################################
### Configure flashlayout for mender partition setup...

# ROOTFS is duplicated: A/B setup but we don't actually duplicate
# the *real* rootfs in the flashlayout because that would make the
# STM32_Cube_Programmer flash the actual rootfs image twice, thus taking
# twice the time to flash the system.
# So, the following trick is to declare a 'rootfsb' partition, whose size
# is the same as 'rootfs' but is marked to be 'empty.
# This way, the STM32_Cube_Programmer will reserve the space for the B
# partition without actually copying data, saving precious time.

# create phony rootfsb partition, with same size as rootfs
FLASHLAYOUT_PARTITION_LABELS:trusted:emmc:append = " rootfsb dataimg"

FLASHLAYOUT_PARTITION_ENABLE:rootfsb = "PED"
FLASHLAYOUT_PARTITION_SIZE:rootfsb = "${IMAGE_ROOTFS_SIZE}"
FLASHLAYOUT_PARTITION_BIN2LOAD:rootfsb = "none"
FLASHLAYOUT_PARTITION_TYPE:rootfsb = "FileSystem"

FLASHLAYOUT_PARTITION_BIN2LOAD:dataimg = "${IMAGE_NAME}.dataimg.ext4"
FLASHLAYOUT_PARTITION_TYPE:dataimg  = "FileSystem"
FLASHLAYOUT_PARTITION_ENABLE:dataimg = "P"

# IMAGE_NAME_SUFFIX is blank, which causes mkext2fs to fail
# if the -L ${IMAGE_NAME_SUFFIX} is provided
EXTRA_IMAGECMD:ext4:remove = "-L"

#
# for some reason, when building the rootfs this dependency isn't
# satisfied by yocto, despite the kernel metadata showing the creation of
# the kernel-devicetree package.
# with time, we may figure this out and replace thie "hack" with something else
# better-formed
MACHINE_ESSENTIAL_EXTRA_RDEPENDS:remove = " kernel-devicetree"

